{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///Users/santiagopradamoreno/Documents/ServiceClient/service-client-client/src/app/utils/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\nimport path from 'path';\nimport fs from 'fs';\nimport { config } from 'process';\n\n// Configuración de la conexión\nconst dbConfig = {\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'serviceClientAIDB',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  waitForConnections: true,\n  connectionLimit: 10,\n  queueLimit: 0,\n  ssl: {\n    ca: fs.readFileSync(path.join(process.cwd(), 'server-ca.pem')),\n    key: fs.readFileSync(path.join(process.cwd(), 'client-key.pem')),\n    cert: fs.readFileSync(path.join(process.cwd(), 'client-cert.pem'))\n  }\n};\n\nconsole.log(\"dbConfig: \",dbConfig)\nconsole.log(\"Ruta Path: \",process.cwd())\n\nlet poolConn: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if(!poolConn){\n    console.log('Creando pool de conexiones');\n    poolConn = mysql.createPool(dbConfig);\n  }\n  return poolConn;\n}\n\n// Función para ejecutar consultas\nexport async function query<T>(sql: string, params: any[] = []): Promise<T> {\n  try {\n    const [results] = await getPool().execute(sql, params);\n    return results as T;\n  } catch (error) {\n    console.error('Error en la consulta SQL:', error);\n    throw error;\n  }\n}\n\n// Función para probar la conexión\nexport async function testConnection(): Promise<boolean> {\n  try {\n    const connection = await getPool().getConnection();\n    console.log('Conexión a la base de datos establecida');\n    connection.release();\n    return true;\n  } catch (error) {\n    console.error('Error al conectar con la base de datos:', error);\n    return false;\n  }\n}\n\n// Crear tabla de usuarios si no existe\nexport async function initDatabase(): Promise<void> {\n  const createTableSQL = `\n    CREATE TABLE IF NOT EXISTS usuarios (\n      id INT AUTO_INCREMENT PRIMARY KEY,\n      usuario VARCHAR(50) NOT NULL UNIQUE,\n      email VARCHAR(100) NOT NULL UNIQUE,\n      password VARCHAR(255) NOT NULL,\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\n  `;\n\n  try {\n    await query(createTableSQL, []);\n    console.log('Tabla de usuarios creada o verificada');\n  } catch (error) {\n    console.error('Error al crear la tabla de usuarios:', error);\n    throw error;\n  }\n}\n\n// Función para obtener una conexión individual\nexport async function getConnection(): Promise<mysql.PoolConnection> {\n  try {\n    const connection = await getPool().getConnection();\n    return connection;\n  } catch (error) {\n    console.error('Error al obtener conexión:', error);\n    throw error;\n  }\n}\n\n// Función para transacciones\nexport async function transaction<T>(\n  callback: (connection: mysql.PoolConnection) => Promise<T>\n): Promise<T> {\n  const connection = await getPool().getConnection();\n  \n  try {\n    await connection.beginTransaction();\n    const result = await callback(connection);\n    await connection.commit();\n    return result;\n  } catch (error) {\n    await connection.rollback();\n    console.error('Error en la transacción:', error);\n    throw error;\n  } finally {\n    connection.release();\n  }\n}\n\n// Función para cerrar el pool (útil al cerrar la aplicación)\nexport async function closeDatabase(): Promise<void> {\n  try {\n    if (poolConn) {\n      await poolConn.end();\n      console.log('Conexión a la base de datos cerrada correctamente');\n    }\n  } catch (error) {\n    console.error('Error al cerrar la base de datos:', error);\n    throw error;\n  }\n}"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;;;;AAGA,+BAA+B;AAC/B,MAAM,WAAW;IACf,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO,IAAI;IACtC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;IACZ,KAAK;QACH,IAAI,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;QAC7C,KAAK,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;QAC9C,MAAM,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;IACjD;AACF;AAEA,QAAQ,GAAG,CAAC,cAAa;AACzB,QAAQ,GAAG,CAAC,eAAc,QAAQ,GAAG;AAErC,IAAI,WAA8B;AAElC,SAAS;IACP,IAAG,CAAC,UAAS;QACX,QAAQ,GAAG,CAAC;QACZ,WAAW,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC9B;IACA,OAAO;AACT;AAGO,eAAe,MAAS,GAAW,EAAE,SAAgB,EAAE;IAC5D,IAAI;QACF,MAAM,CAAC,QAAQ,GAAG,MAAM,UAAU,OAAO,CAAC,KAAK;QAC/C,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM;IACR;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,aAAa,MAAM,UAAU,aAAa;QAChD,QAAQ,GAAG,CAAC;QACZ,WAAW,OAAO;QAClB,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2CAA2C;QACzD,OAAO;IACT;AACF;AAGO,eAAe;IACpB,MAAM,iBAAiB,CAAC;;;;;;;;EAQxB,CAAC;IAED,IAAI;QACF,MAAM,MAAM,gBAAgB,EAAE;QAC9B,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,MAAM;IACR;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,aAAa,MAAM,UAAU,aAAa;QAChD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM;IACR;AACF;AAGO,eAAe,YACpB,QAA0D;IAE1D,MAAM,aAAa,MAAM,UAAU,aAAa;IAEhD,IAAI;QACF,MAAM,WAAW,gBAAgB;QACjC,MAAM,SAAS,MAAM,SAAS;QAC9B,MAAM,WAAW,MAAM;QACvB,OAAO;IACT,EAAE,OAAO,OAAO;QACd,MAAM,WAAW,QAAQ;QACzB,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,MAAM;IACR,SAAU;QACR,WAAW,OAAO;IACpB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,IAAI,UAAU;YACZ,MAAM,SAAS,GAAG;YAClB,QAAQ,GAAG,CAAC;QACd;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":["file:///Users/santiagopradamoreno/Documents/ServiceClient/service-client-client/src/app/api/users/getUsers/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { query } from '../../../utils/db';\nimport {User} from '../../../utils/Types/User';\n\n\n/**\n * @desc    Obtiene todos los usuarios registrados\n * @route   GET /api/users\n * @access  Público\n * @returns {NextResponse} Respuesta JSON con lista de usuarios o error\n * @throws  {500} Error del servidor si falla la consulta\n */\nexport async function GET() {\n    try {\n        const usuarios = await query<User[]>(`SELECT * FROM users`);\n        \n        return NextResponse.json(\n            { \n                success: true, \n                data: usuarios,\n                message: 'Users retrieved successfully' \n            },\n            { status: 200 }\n        );\n    } catch (error) {\n        console.error('Database query error:', error);\n        return NextResponse.json(\n            { \n                success: false, \n                message: 'Failed to retrieve users',\n                error: error instanceof Error ? error.message : 'Unknown error'\n            },\n            { status: 500 }\n        );\n    }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAWO,eAAe;IAClB,IAAI;QACA,MAAM,WAAW,MAAM,CAAA,GAAA,2HAAA,CAAA,QAAK,AAAD,EAAU,CAAC,mBAAmB,CAAC;QAE1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YACI,SAAS;YACT,MAAM;YACN,SAAS;QACb,GACA;YAAE,QAAQ;QAAI;IAEtB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YACI,SAAS;YACT,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GACA;YAAE,QAAQ;QAAI;IAEtB;AACJ","debugId":null}}]
}