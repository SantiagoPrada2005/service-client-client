{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/santiagopradamoreno/Documents/ServiceClient/service-client-client/src/app/api/AIHandler/geminiHandler/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\n// This would be replaced with actual Gemini API integration\nexport async function POST(request: Request) {\n  try {\n    const { message } = await request.json();\n    \n    // Here you would integrate with the Gemini API\n    // This is a placeholder for the actual implementation\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Mock response - replace with actual Gemini API call\n    const response = `This is a simulated response from the Gemini API. You asked: \"${message}\"\n    \nIn a real implementation, this would connect to the Gemini API and return an actual AI-generated response.`;\n    \n    return NextResponse.json({ \n      success: true, \n      response \n    });\n    \n  } catch (error) {\n    console.error('Error in Gemini API route:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to process request' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;;AAGO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEtC,+CAA+C;QAC/C,sDAAsD;QAEtD,qBAAqB;QACrB,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;QAEjD,sDAAsD;QACtD,MAAM,WAAW,CAAC,8DAA8D,EAAE,QAAQ;;0GAEY,CAAC;QAEvG,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAA4B,GACrD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}