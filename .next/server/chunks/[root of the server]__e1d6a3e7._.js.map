{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///Users/santiagopradamoreno/Documents/ServiceClient/service-client-client/src/app/utils/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\nimport path from 'path';\nimport fs from 'fs';\nimport { config } from 'process';\n\n// Configuración de la conexión\nconst dbConfig = {\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'serviceClientAIDB',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  waitForConnections: true,\n  connectionLimit: 10,\n  queueLimit: 0,\n  ssl: {\n    ca: fs.readFileSync(path.join(process.cwd(), 'server-ca.pem')),\n    key: fs.readFileSync(path.join(process.cwd(), 'client-key.pem')),\n    cert: fs.readFileSync(path.join(process.cwd(), 'client-cert.pem'))\n  }\n};\n\nconsole.log(\"Ruta Path: \",process.cwd())\n\nlet poolConn: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if(!poolConn){\n    console.log('Creando pool de conexiones');\n    poolConn = mysql.createPool(dbConfig);\n  }\n  return poolConn;\n}\n\n// Función para ejecutar consultas\nexport async function query<T>(sql: string, params: any[] = []): Promise<T> {\n  try {\n    const [results] = await getPool().execute(sql, params);\n    return results as T;\n  } catch (error) {\n    console.error('Error en la consulta SQL:', error);\n    throw error;\n  }\n}\n\n// Función para probar la conexión\nexport async function testConnection(): Promise<boolean> {\n  try {\n    const connection = await getPool().getConnection();\n    console.log('Conexión a la base de datos establecida');\n    connection.release();\n    return true;\n  } catch (error) {\n    console.error('Error al conectar con la base de datos:', error);\n    return false;\n  }\n}\n\n// Crear tabla de usuarios si no existe\nexport async function initDatabase(): Promise<void> {\n  const createTableSQL = `\n    CREATE TABLE IF NOT EXISTS usuarios (\n      id INT AUTO_INCREMENT PRIMARY KEY,\n      usuario VARCHAR(50) NOT NULL UNIQUE,\n      email VARCHAR(100) NOT NULL UNIQUE,\n      password VARCHAR(255) NOT NULL,\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\n  `;\n\n  try {\n    await query(createTableSQL, []);\n    console.log('Tabla de usuarios creada o verificada');\n  } catch (error) {\n    console.error('Error al crear la tabla de usuarios:', error);\n    throw error;\n  }\n}\n\n// Función para obtener una conexión individual\nexport async function getConnection(): Promise<mysql.PoolConnection> {\n  try {\n    const connection = await getPool().getConnection();\n    return connection;\n  } catch (error) {\n    console.error('Error al obtener conexión:', error);\n    throw error;\n  }\n}\n\n// Función para transacciones\nexport async function transaction<T>(\n  callback: (connection: mysql.PoolConnection) => Promise<T>\n): Promise<T> {\n  const connection = await getPool().getConnection();\n  \n  try {\n    await connection.beginTransaction();\n    const result = await callback(connection);\n    await connection.commit();\n    return result;\n  } catch (error) {\n    await connection.rollback();\n    console.error('Error en la transacción:', error);\n    throw error;\n  } finally {\n    connection.release();\n  }\n}\n\n// Función para cerrar el pool (útil al cerrar la aplicación)\nexport async function closeDatabase(): Promise<void> {\n  try {\n    if (poolConn) {\n      await poolConn.end();\n      console.log('Conexión a la base de datos cerrada correctamente');\n    }\n  } catch (error) {\n    console.error('Error al cerrar la base de datos:', error);\n    throw error;\n  }\n}"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;;;;AAGA,+BAA+B;AAC/B,MAAM,WAAW;IACf,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO,IAAI;IACtC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;IACZ,KAAK;QACH,IAAI,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;QAC7C,KAAK,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;QAC9C,MAAM,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;IACjD;AACF;AAEA,QAAQ,GAAG,CAAC,eAAc,QAAQ,GAAG;AAErC,IAAI,WAA8B;AAElC,SAAS;IACP,IAAG,CAAC,UAAS;QACX,QAAQ,GAAG,CAAC;QACZ,WAAW,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC9B;IACA,OAAO;AACT;AAGO,eAAe,MAAS,GAAW,EAAE,SAAgB,EAAE;IAC5D,IAAI;QACF,MAAM,CAAC,QAAQ,GAAG,MAAM,UAAU,OAAO,CAAC,KAAK;QAC/C,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM;IACR;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,aAAa,MAAM,UAAU,aAAa;QAChD,QAAQ,GAAG,CAAC;QACZ,WAAW,OAAO;QAClB,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2CAA2C;QACzD,OAAO;IACT;AACF;AAGO,eAAe;IACpB,MAAM,iBAAiB,CAAC;;;;;;;;EAQxB,CAAC;IAED,IAAI;QACF,MAAM,MAAM,gBAAgB,EAAE;QAC9B,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,MAAM;IACR;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,aAAa,MAAM,UAAU,aAAa;QAChD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM;IACR;AACF;AAGO,eAAe,YACpB,QAA0D;IAE1D,MAAM,aAAa,MAAM,UAAU,aAAa;IAEhD,IAAI;QACF,MAAM,WAAW,gBAAgB;QACjC,MAAM,SAAS,MAAM,SAAS;QAC9B,MAAM,WAAW,MAAM;QACvB,OAAO;IACT,EAAE,OAAO,OAAO;QACd,MAAM,WAAW,QAAQ;QACzB,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,MAAM;IACR,SAAU;QACR,WAAW,OAAO;IACpB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,IAAI,UAAU;YACZ,MAAM,SAAS,GAAG;YAClB,QAAQ,GAAG,CAAC;QACd;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///Users/santiagopradamoreno/Documents/ServiceClient/service-client-client/src/app/utils/crudUtils.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { query } from './db';\nimport type { ResultSetHeader } from 'mysql2/promise';\n\ninterface BaseEntity {\n  id: number;\n}\n\ninterface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  message: string;\n  error?: string;\n}\n\n/**\n * Generic function to get all entities of a specific type\n * @param tableName The database table name\n * @param customQuery Optional custom query to replace the default SELECT * query\n * @param params Optional parameters for the custom query\n */\nexport async function getAllEntities<T>(\n  tableName: string,\n  customQuery?: string,\n  params: any[] = []\n) {\n  try {\n    const queryString = customQuery || `SELECT * FROM ${tableName}`;\n    const entities = await query<T[]>(queryString, params);\n    \n    return NextResponse.json<ApiResponse<T[]>>(\n      { \n        success: true, \n        data: entities,\n        message: `${tableName} retrieved successfully` \n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error(`Database query error for ${tableName}:`, error);\n    return NextResponse.json<ApiResponse<T[]>>(\n      { \n        success: false, \n        message: `Failed to retrieve ${tableName}`,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Generic function to create a new entity\n * @param tableName The database table name\n * @param data The entity data to insert\n * @param requiredFields Array of field names that are required\n * @param validateFn Optional function to perform additional validation\n */\nexport async function createEntity<T extends BaseEntity>(\n  tableName: string,\n  data: Omit<T, 'id'>,\n  requiredFields: string[] = [],\n  validateFn?: (data: any) => { isValid: boolean; message?: string }\n) {\n  try {\n    // Check required fields\n    for (const field of requiredFields) {\n      if (data[field as keyof typeof data] === undefined) {\n        return NextResponse.json<ApiResponse<T>>(\n          { success: false, message: `${field} is required` },\n          { status: 400 }\n        );\n      }\n    }\n\n    // Run custom validation if provided\n    if (validateFn) {\n      const validation = validateFn(data);\n      if (!validation.isValid) {\n        return NextResponse.json<ApiResponse<T>>(\n          { success: false, message: validation.message || 'Validation failed' },\n          { status: 400 }\n        );\n      }\n    }\n\n    // Prepare fields and values for insertion\n    const fields = Object.keys(data);\n    const placeholders = fields.map(() => '?').join(', ');\n    const values = Object.values(data);\n\n    // Convert camelCase to snake_case for database fields\n    const dbFields = fields.map(field => \n      field.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`)\n    );\n\n    // Insert the entity\n    const insertResult = await query<ResultSetHeader>(\n      `INSERT INTO ${tableName} (${dbFields.join(', ')}) VALUES (${placeholders})`,\n      values\n    );\n\n    // Get the newly created entity\n    const [newEntity] = await query<T[]>(\n      `SELECT * FROM ${tableName} WHERE id = ?`,\n      [insertResult.insertId]\n    );\n\n    return NextResponse.json<ApiResponse<T>>(\n      { success: true, data: newEntity, message: `${tableName} created successfully` },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(`Error creating ${tableName}:`, error);\n    return NextResponse.json<ApiResponse<T>>(\n      { \n        success: false,\n        message: `Error creating ${tableName}`,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Generic function to update an existing entity\n * @param tableName The database table name\n * @param id The entity ID to update\n * @param updateData The data to update\n * @param validateFn Optional function to perform additional validation\n */\nexport async function updateEntity<T extends BaseEntity>(\n  tableName: string,\n  id: number,\n  updateData: Partial<Omit<T, 'id'>>,\n  validateFn?: (data: any) => { isValid: boolean; message?: string }\n) {\n  try {\n    if (!id) {\n      return NextResponse.json<ApiResponse<T>>(\n        { success: false, message: 'ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Run custom validation if provided\n    if (validateFn) {\n      const validation = validateFn(updateData);\n      if (!validation.isValid) {\n        return NextResponse.json<ApiResponse<T>>(\n          { success: false, message: validation.message || 'Validation failed' },\n          { status: 400 }\n        );\n      }\n    }\n\n    // Convert camelCase keys to snake_case for database\n    const dbUpdateData: Record<string, any> = {};\n    Object.entries(updateData).forEach(([key, value]) => {\n      const dbKey = key.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n      dbUpdateData[dbKey] = value;\n    });\n\n    // Build SET clause dynamically\n    const setClauses = Object.keys(dbUpdateData).map(key => `${key} = ?`);\n    const values = Object.values(dbUpdateData);\n\n    const queryString = `UPDATE ${tableName} SET ${setClauses.join(', ')} WHERE id = ?`;\n    const updateResult = await query<ResultSetHeader>(queryString, [...values, id]);\n\n    // Check if any record was updated\n    if (updateResult.affectedRows === 0) {\n      return NextResponse.json<ApiResponse<T>>(\n        { success: false, message: `${tableName} not found` },\n        { status: 404 }\n      );\n    }\n\n    // Get the updated entity\n    const [updatedEntity] = await query<T[]>(\n      `SELECT * FROM ${tableName} WHERE id = ?`,\n      [id]\n    );\n\n    return NextResponse.json<ApiResponse<T>>(\n      { success: true, data: updatedEntity, message: `${tableName} updated successfully` },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error(`Error updating ${tableName}:`, error);\n    return NextResponse.json<ApiResponse<T>>(\n      { \n        success: false,\n        message: `Error updating ${tableName}`,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Generic function to delete an entity\n * @param tableName The database table name\n * @param id The entity ID to delete\n */\nexport async function deleteEntity<T extends BaseEntity>(\n  tableName: string,\n  id: number\n) {\n  try {\n    if (!id) {\n      return NextResponse.json<ApiResponse<null>>(\n        { success: false, message: 'ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Check if MySQL supports RETURNING clause, otherwise use a different approach\n    let result;\n    try {\n      result = await query<ResultSetHeader>(\n        `DELETE FROM ${tableName} WHERE id = ? RETURNING *`,\n        [id]\n      );\n    } catch (e) {\n      // If RETURNING is not supported, check if entity exists first\n      const [entity] = await query<T[]>(\n        `SELECT id FROM ${tableName} WHERE id = ?`,\n        [id]\n      );\n      \n      if (!entity) {\n        return NextResponse.json<ApiResponse<null>>(\n          { success: false, message: `${tableName} not found` },\n          { status: 404 }\n        );\n      }\n      \n      result = await query<ResultSetHeader>(\n        `DELETE FROM ${tableName} WHERE id = ?`,\n        [id]\n      );\n    }\n\n    if (result.affectedRows === 0) {\n      return NextResponse.json<ApiResponse<null>>(\n        { success: false, message: `${tableName} not found` },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json<ApiResponse<null>>(\n      { success: true, message: `${tableName} deleted successfully` },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error(`Error deleting ${tableName}:`, error);\n    return NextResponse.json<ApiResponse<null>>(\n      { \n        success: false,\n        message: `Error deleting ${tableName}`,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 508, "column": 0}, "map": {"version":3,"sources":["file:///Users/santiagopradamoreno/Documents/ServiceClient/service-client-client/src/app/api/plans/route.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { Plan } from '../../utils/Types/Plan';\nimport { \n  getAllEntities, \n  createEntity, \n  updateEntity, \n  deleteEntity \n} from '../../utils/crudUtils';\n\n// Table name constant\nconst TABLE_NAME = 'plans';\n\n// Validation function for plans\nfunction validatePlanData(data: Partial<Omit<Plan, 'id'>>) {\n  if (!data.name) {\n    return { isValid: false, message: 'Name is required' };\n  }\n  \n  if (data.price !== undefined && typeof data.price !== 'number') {\n    return { isValid: false, message: 'Price is required' };\n  }\n  \n  if (data.maxChatbots !== undefined && typeof data.maxChatbots !== 'number') {\n    return { isValid: false, message: 'maxChatbots must be a number' };\n  }\n  \n  if (data.maxMessages !== undefined && typeof data.maxMessages !== 'number') {\n    return { isValid: false, message: 'maxMessages must be a number' };\n  }\n  \n  return { isValid: true };\n}\n\nexport async function GET() {\n  return getAllEntities<Plan>(TABLE_NAME);\n}\n\nexport async function POST(req: NextRequest) {\n  const data = await req.json();\n  return createEntity<Plan>(\n    TABLE_NAME,\n    data,\n    ['name', 'price', 'maxChatbots', 'maxMessages'],\n    validatePlanData\n  );\n}\n\nexport async function PUT(req: NextRequest) {\n  const { id, ...updateData } = await req.json();\n  return updateEntity<Plan>(\n    TABLE_NAME,\n    id,\n    updateData,\n    validatePlanData\n  );\n}\n\nexport async function DELETE(req: Request) {\n  const { id } = await req.json();\n  return deleteEntity<Plan>(TABLE_NAME, id);\n}\n"],"names":[],"mappings":";;;;;;AAEA;;AAOA,sBAAsB;AACtB,MAAM,aAAa;AAEnB,gCAAgC;AAChC,SAAS,iBAAiB,IAA+B;IACvD,IAAI,CAAC,KAAK,IAAI,EAAE;QACd,OAAO;YAAE,SAAS;YAAO,SAAS;QAAmB;IACvD;IAEA,IAAI,KAAK,KAAK,KAAK,aAAa,OAAO,KAAK,KAAK,KAAK,UAAU;QAC9D,OAAO;YAAE,SAAS;YAAO,SAAS;QAAoB;IACxD;IAEA,IAAI,KAAK,WAAW,KAAK,aAAa,OAAO,KAAK,WAAW,KAAK,UAAU;QAC1E,OAAO;YAAE,SAAS;YAAO,SAAS;QAA+B;IACnE;IAEA,IAAI,KAAK,WAAW,KAAK,aAAa,OAAO,KAAK,WAAW,KAAK,UAAU;QAC1E,OAAO;YAAE,SAAS;YAAO,SAAS;QAA+B;IACnE;IAEA,OAAO;QAAE,SAAS;IAAK;AACzB;AAEO,eAAe;IACpB,OAAO,CAAA,GAAA,kIAAA,CAAA,iBAAc,AAAD,EAAQ;AAC9B;AAEO,eAAe,KAAK,GAAgB;IACzC,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,OAAO,CAAA,GAAA,kIAAA,CAAA,eAAY,AAAD,EAChB,YACA,MACA;QAAC;QAAQ;QAAS;QAAe;KAAc,EAC/C;AAEJ;AAEO,eAAe,IAAI,GAAgB;IACxC,MAAM,EAAE,EAAE,EAAE,GAAG,YAAY,GAAG,MAAM,IAAI,IAAI;IAC5C,OAAO,CAAA,GAAA,kIAAA,CAAA,eAAY,AAAD,EAChB,YACA,IACA,YACA;AAEJ;AAEO,eAAe,OAAO,GAAY;IACvC,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,IAAI,IAAI;IAC7B,OAAO,CAAA,GAAA,kIAAA,CAAA,eAAY,AAAD,EAAQ,YAAY;AACxC","debugId":null}}]
}