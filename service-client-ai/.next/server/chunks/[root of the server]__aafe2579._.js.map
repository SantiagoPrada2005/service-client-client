{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Usuario/Desktop/brian/GUI/service-client-client/service-client-ai/src/app/utils/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\nimport path from 'path';\nimport fs from 'fs';\n\n// Configuración de la conexión\nconst dbConfig = {\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'serviceClientAIDB',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  waitForConnections: true,\n  connectionLimit: 10,\n  queueLimit: 0,\n  ssl: {\n    ca: fs.readFileSync(path.join(process.cwd(), 'SSL', 'server-ca.pem')),\n    key: fs.readFileSync(path.join(process.cwd(), 'SSL', 'client-key.pem')),\n    cert: fs.readFileSync(path.join(process.cwd(), 'SSL', 'client-cert.pem'))\n  }\n};\n\nlet poolConn: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if(!poolConn){\n    console.log('Creando pool de conexiones');\n    poolConn = mysql.createPool(dbConfig);\n  }\n  return poolConn;\n}\n\n// Función para ejecutar consultas\nexport async function query<T>(sql: string, params: any[] = []): Promise<T> {\n  try {\n    const [results] = await getPool().execute(sql, params);\n    return results as T;\n  } catch (error) {\n    console.error('Error en la consulta SQL:', error);\n    throw error;\n  }\n}\n\n// Función para probar la conexión\nexport async function testConnection(): Promise<boolean> {\n  try {\n    const connection = await getPool().getConnection();\n    console.log('Conexión a la base de datos establecida');\n    connection.release();\n    return true;\n  } catch (error) {\n    console.error('Error al conectar con la base de datos:', error);\n    return false;\n  }\n}\n\n// Crear tabla de usuarios si no existe\nexport async function initDatabase(): Promise<void> {\n  const createTableSQL = `\n    CREATE TABLE IF NOT EXISTS usuarios (\n      id INT AUTO_INCREMENT PRIMARY KEY,\n      usuario VARCHAR(50) NOT NULL UNIQUE,\n      email VARCHAR(100) NOT NULL UNIQUE,\n      password VARCHAR(255) NOT NULL,\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\n  `;\n\n  try {\n    await query(createTableSQL, []);\n    console.log('Tabla de usuarios creada o verificada');\n  } catch (error) {\n    console.error('Error al crear la tabla de usuarios:', error);\n    throw error;\n  }\n}\n\n// Función para obtener una conexión individual\nexport async function getConnection(): Promise<mysql.PoolConnection> {\n  try {\n    const connection = await getPool().getConnection();\n    return connection;\n  } catch (error) {\n    console.error('Error al obtener conexión:', error);\n    throw error;\n  }\n}\n\n// Función para transacciones\nexport async function transaction<T>(\n  callback: (connection: mysql.PoolConnection) => Promise<T>\n): Promise<T> {\n  const connection = await getPool().getConnection();\n  \n  try {\n    await connection.beginTransaction();\n    const result = await callback(connection);\n    await connection.commit();\n    return result;\n  } catch (error) {\n    await connection.rollback();\n    console.error('Error en la transacción:', error);\n    throw error;\n  } finally {\n    connection.release();\n  }\n}\n\n// Función para cerrar el pool (útil al cerrar la aplicación)\nexport async function closeDatabase(): Promise<void> {\n  try {\n    if (poolConn) {\n      await poolConn.end();\n      console.log('Conexión a la base de datos cerrada correctamente');\n    }\n  } catch (error) {\n    console.error('Error al cerrar la base de datos:', error);\n    throw error;\n  }\n}"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;;;;AAEA,+BAA+B;AAC/B,MAAM,WAAW;IACf,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO,IAAI;IACtC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;IACZ,KAAK;QACH,IAAI,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO;QACpD,KAAK,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO;QACrD,MAAM,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO;IACxD;AACF;AAEA,IAAI,WAA8B;AAElC,SAAS;IACP,IAAG,CAAC,UAAS;QACX,QAAQ,GAAG,CAAC;QACZ,WAAW,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC9B;IACA,OAAO;AACT;AAGO,eAAe,MAAS,GAAW,EAAE,SAAgB,EAAE;IAC5D,IAAI;QACF,MAAM,CAAC,QAAQ,GAAG,MAAM,UAAU,OAAO,CAAC,KAAK;QAC/C,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM;IACR;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,aAAa,MAAM,UAAU,aAAa;QAChD,QAAQ,GAAG,CAAC;QACZ,WAAW,OAAO;QAClB,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2CAA2C;QACzD,OAAO;IACT;AACF;AAGO,eAAe;IACpB,MAAM,iBAAiB,CAAC;;;;;;;;EAQxB,CAAC;IAED,IAAI;QACF,MAAM,MAAM,gBAAgB,EAAE;QAC9B,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,MAAM;IACR;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,aAAa,MAAM,UAAU,aAAa;QAChD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM;IACR;AACF;AAGO,eAAe,YACpB,QAA0D;IAE1D,MAAM,aAAa,MAAM,UAAU,aAAa;IAEhD,IAAI;QACF,MAAM,WAAW,gBAAgB;QACjC,MAAM,SAAS,MAAM,SAAS;QAC9B,MAAM,WAAW,MAAM;QACvB,OAAO;IACT,EAAE,OAAO,OAAO;QACd,MAAM,WAAW,QAAQ;QACzB,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,MAAM;IACR,SAAU;QACR,WAAW,OAAO;IACpB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,IAAI,UAAU;YACZ,MAAM,SAAS,GAAG;YAClB,QAAQ,GAAG,CAAC;QACd;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 283, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Usuario/Desktop/brian/GUI/service-client-client/service-client-ai/src/app/api/users/auth/login/route.ts"],"sourcesContent":["// app/api/auth/login/route.ts\nimport { NextResponse } from 'next/server';\nimport { query } from '../../../../utils/db';\nimport { User } from '../../../../utils/Types/User';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\n\n/**\n * POST /api/auth/login\n * \n * Autentica un usuario y devuelve un token JWT\n * \n * @body {object} credentials - Datos de autenticación\n * @body {string} credentials.username - Nombre de usuario\n * @body {string} credentials.password - Contraseña\n * \n * @returns {object} - Objeto con token JWT y datos básicos del usuario\n * @returns {number} 200 - Autenticación exitosa\n * @returns {number} 400 - Datos inválidos o faltantes\n * @returns {number} 401 - Credenciales inválidas\n * @returns {number} 500 - Error del servidor\n */\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    const { username, password } = body;\n\n    // Validar que se proporcionaron las credenciales\n    if (!username || !password) {\n      return NextResponse.json(\n        { success: false, message: 'Usuario y contraseña son requeridos' },\n        { status: 400 }\n      );\n    }\n\n    // Buscar el usuario en la base de datos\n    const users = await query<User[]>(\n      'SELECT * FROM users WHERE username = ?',\n      [username]\n    );\n\n    // Verificar si el usuario existe\n    if (users.length === 0) {\n      return NextResponse.json(\n        { success: false, message: 'Credenciales inválidas' },\n        { status: 401 }\n      );\n    }\n\n    const user = users[0];\n\n    // Verificar la contraseña\n    const passwordMatch = await bcrypt.compare(password, user.password);\n    if (!passwordMatch) {\n      return NextResponse.json(\n        { success: false, message: 'Credenciales inválidas' },\n        { status: 401 }\n      );\n    }\n\n    // Generar token JWT\n    const token = jwt.sign(\n      { \n        userId: user.id,\n        username: user.username,\n        email: user.email\n      },\n      process.env.JWT_SECRET || 'your-secret-key', // Usa una variable de entorno en producción\n      { \n        expiresIn: '24h' \n      }\n    );\n\n    // Devolver respuesta exitosa con token y datos de usuario (sin contraseña)\n    const { password: _, ...userWithoutPassword } = user;\n    \n    return NextResponse.json(\n      {\n        success: true,\n        message: 'Autenticación exitosa',\n        token,\n        user: userWithoutPassword\n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Error en autenticación:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        message: 'Error al procesar la solicitud',\n        error: error instanceof Error ? error.message : 'Error desconocido'\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"AAAA,8BAA8B;;;;AAC9B;AACA;AAEA;AACA;;;;;AAiBO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAE/B,iDAAiD;QACjD,IAAI,CAAC,YAAY,CAAC,UAAU;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAsC,GACjE;gBAAE,QAAQ;YAAI;QAElB;QAEA,wCAAwC;QACxC,MAAM,QAAQ,MAAM,CAAA,GAAA,2HAAA,CAAA,QAAK,AAAD,EACtB,0CACA;YAAC;SAAS;QAGZ,iCAAiC;QACjC,IAAI,MAAM,MAAM,KAAK,GAAG;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAyB,GACpD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,KAAK,CAAC,EAAE;QAErB,0BAA0B;QAC1B,MAAM,gBAAgB,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QAClE,IAAI,CAAC,eAAe;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAyB,GACpD;gBAAE,QAAQ;YAAI;QAElB;QAEA,oBAAoB;QACpB,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CACpB;YACE,QAAQ,KAAK,EAAE;YACf,UAAU,KAAK,QAAQ;YACvB,OAAO,KAAK,KAAK;QACnB,GACA,QAAQ,GAAG,CAAC,UAAU,IAAI,mBAC1B;YACE,WAAW;QACb;QAGF,2EAA2E;QAC3E,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,qBAAqB,GAAG;QAEhD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;YACT;YACA,MAAM;QACR,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}